// <auto-generated />
using System;
using LibraryMvcEF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryMvcEF.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230513154105_AddingTables")]
    partial class AddingTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("int");

                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("AuthorBook");

                    b.HasData(
                        new
                        {
                            AuthorsId = 1,
                            BooksId = 1
                        },
                        new
                        {
                            AuthorsId = 2,
                            BooksId = 2
                        },
                        new
                        {
                            AuthorsId = 3,
                            BooksId = 3
                        },
                        new
                        {
                            AuthorsId = 4,
                            BooksId = 4
                        },
                        new
                        {
                            AuthorsId = 5,
                            BooksId = 5
                        },
                        new
                        {
                            AuthorsId = 6,
                            BooksId = 6
                        });
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.HasKey("BooksId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("BookGenre");

                    b.HasData(
                        new
                        {
                            BooksId = 1,
                            GenresId = 2
                        },
                        new
                        {
                            BooksId = 2,
                            GenresId = 2
                        },
                        new
                        {
                            BooksId = 3,
                            GenresId = 2
                        },
                        new
                        {
                            BooksId = 4,
                            GenresId = 1
                        },
                        new
                        {
                            BooksId = 5,
                            GenresId = 3
                        },
                        new
                        {
                            BooksId = 6,
                            GenresId = 4
                        });
                });

            modelBuilder.Entity("LibraryMvcEF.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "George Orwell"
                        },
                        new
                        {
                            Id = 2,
                            Name = "H G Wells"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Yevgeny Zamyatin"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Wilkie Collins"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Jane Austen"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Robert Louis Stevenson"
                        });
                });

            modelBuilder.Entity("LibraryMvcEF.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "George Orwell",
                            ISBN = "9780141036144",
                            Quantity = "5",
                            Title = "1984"
                        },
                        new
                        {
                            Id = 2,
                            Author = "H G Wells",
                            ISBN = "9781847496461",
                            Quantity = "2",
                            Title = "The War of the Worlds"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Yevgeny Zamyatin",
                            ISBN = "9781847496768",
                            Quantity = "3",
                            Title = "We: New translation"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Wilkie Collins",
                            ISBN = "9781847498397",
                            Quantity = "6",
                            Title = "The Haunted Hotel"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Jane Austen",
                            ISBN = "9780141439518",
                            Quantity = "10",
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            Id = 6,
                            Author = "Robert Louis Stevenson",
                            ISBN = "9784909069009",
                            Quantity = "5",
                            Title = "Tresuare Island"
                        });
                });

            modelBuilder.Entity("LibraryMvcEF.Models.Copy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("BookTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Checkedout")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Inhouse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Copies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 2,
                            BookTitle = "The War of the Worlds",
                            Checkedout = "0",
                            Inhouse = "2"
                        },
                        new
                        {
                            Id = 2,
                            BookId = 3,
                            BookTitle = "We: New translation",
                            Checkedout = "2",
                            Inhouse = "1"
                        },
                        new
                        {
                            Id = 3,
                            BookId = 4,
                            BookTitle = "The Haunted Hotel",
                            Checkedout = "3",
                            Inhouse = "3"
                        });
                });

            modelBuilder.Entity("LibraryMvcEF.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Drama"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Science fiction"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Classic"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Action and Adventure"
                        });
                });

            modelBuilder.Entity("LibraryMvcEF.Models.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("BookQuantity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LoanPeriod")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Loans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            BookQuantity = "1",
                            LoanPeriod = new DateTime(2023, 5, 13, 17, 41, 5, 209, DateTimeKind.Local).AddTicks(9330),
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            BookId = 3,
                            BookQuantity = "2",
                            LoanPeriod = new DateTime(2023, 5, 13, 17, 41, 5, 209, DateTimeKind.Local).AddTicks(9540),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookId = 4,
                            BookQuantity = "3",
                            LoanPeriod = new DateTime(2023, 5, 13, 17, 41, 5, 209, DateTimeKind.Local).AddTicks(9560),
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            BookId = 6,
                            BookQuantity = "5",
                            LoanPeriod = new DateTime(2023, 5, 13, 17, 41, 5, 209, DateTimeKind.Local).AddTicks(9580),
                            UserId = 4
                        });
                });

            modelBuilder.Entity("LibraryMvcEF.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Edingsvägen 6, 451 52 Uddevalla",
                            Name = "Thomas Dahlman",
                            PhoneNumber = "052212470"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Drottninggatan 10, 11 51 Stockholm",
                            Name = "Johan Karlsson",
                            PhoneNumber = "01233445"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Botkyrkavägen 3, 143 30 Vårby",
                            Name = "Lisa Andersson",
                            PhoneNumber = "0532412470"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Fruängsgången 12, 129 52 Hägersten",
                            Name = "Stella Kobal",
                            PhoneNumber = "073235470"
                        });
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("LibraryMvcEF.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryMvcEF.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("LibraryMvcEF.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryMvcEF.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryMvcEF.Models.Copy", b =>
                {
                    b.HasOne("LibraryMvcEF.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryMvcEF.Models.Loan", b =>
                {
                    b.HasOne("LibraryMvcEF.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryMvcEF.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
